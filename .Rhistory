library(spdep)
library(ggplot2)
library(ggspatial)
library(blockCV)
library(randomForest)
library(rJava)
library(dismo)
library(ggpubr)
library(questionr)
library(CENFA)
reshapePA<-function(Rasterstack,espece){
Pred<-list()
data<-as.data.frame(Rasterstack)
PA<-reshape(data, direction = "long", varying=1:ncol(data),v.names = c("Pred"),times =1:ncol(data) )
PA$Species<-rep(espece,each=nrow(data))
PA<-PA[,c("Pred","Species")]
BaseStat<-as.data.frame(cprop(table(PA)))
BaseStat<-BaseStat %>%
filter(Pred!="Total") %>%
filter(Species!="Ensemble")
BaseStat$Freq<-round(BaseStat$Freq,2)
Pred[["Predict table"]]<-BaseStat
plot<-ggbarplot(BaseStat,
x = "Species", y = "Freq",
fill = "Pred",
color = "Pred",
legend="top",label=TRUE,lab.pos = "in",ggtheme = theme_bw())
Pred[["Plot"]]<-plot
return(Pred)
}
Explorer<-function (blocks, rasterLayer, speciesData, num) {
# records<-blocks$records
# records$fold<-1:nrow(records)
# records <- records[,c(5,1,2,3,4)] %>%
#   mutate(calcul= round((test_0 + test_1)*100/(test_0 + test_1+train_1 + train_0),digits = 0))
# records.p <- ggtexttable(records,rows = NULL, theme = ttheme("mGreen"))
#
polyObj <- blocks$blocks
folds <- blocks$folds
kmax <- length(folds)
species <- blocks$species
speciesData <- sf::st_as_sf(speciesData)
samp <- raster::sampleRegular(rasterLayer[[1]], 5e+05, asRaster = TRUE)
map_df <- raster::as.data.frame(samp, xy = TRUE, centroids = TRUE,
na.rm = TRUE)
colnames(map_df) <- c("Easting", "Northing", "MAP")
mid <- stats::median(map_df$MAP)
basePlot <- ggplot2::ggplot() + ggplot2::geom_raster(data = map_df,
ggplot2::aes_string(y = "Northing", x = "Easting", fill = "MAP")) +
ggplot2::scale_fill_gradient2(low = "darkred", mid = "yellow",
high = "darkgreen", midpoint = mid) + ggplot2::guides(fill = FALSE) +
ggplot2::theme_bw() + ggplot2::labs(x = "", y = "")
trainSet <- unlist(folds[[num]][1])
testSet <- unlist(folds[[num]][2])
training <- speciesData[trainSet, ]
testing <- speciesData[testSet, ]
plotPoly <- polyObj[polyObj$folds ==num,]
plotPoly <- sf::st_as_sf(plotPoly)
if (is.null(species)) {
if (class(blocks) == "SpatialBlock") {
ptr <- basePlot + ggplot2::geom_sf(data = plotPoly,
color = "red", fill = "orangered4", alpha = 0.04,
size = 0.2) + ggplot2::geom_sf(data = training,
alpha = 0.7, color = "blue", size = 2) +
ggplot2::ggtitle("Training set") + theme(plot.title = element_text(hjust = 0.5, size = 10))
pts <- basePlot + ggplot2::geom_sf(data = plotPoly,
color = "red", fill = "orangered4", alpha = 0.04,
size = 0.2) + ggplot2::geom_sf(data = testing,
alpha = 0.7, color = "blue", size = 2) +
ggplot2::ggtitle("Testing set") + theme(plot.title = element_text(hjust = 0.5, size = 10))
}
else {
ptr <- basePlot + ggplot2::geom_sf(data = training,
alpha = 0.7, color = "blue", size = 2) +
ggplot2::ggtitle("Training set") + theme(plot.title = element_text(hjust = 0.5, size = 10))
pts <- basePlot + ggplot2::geom_sf(data = testing,
alpha = 0.7, color = "blue", size = 2) +
ggplot2::ggtitle("Testing set") + theme(plot.title = element_text(hjust = 0.5, size = 10))
}
}
else {
if (class(blocks) == "SpatialBlock") {
ptr <- basePlot + ggplot2::geom_sf(data = plotPoly,
color = "red", fill = "orangered4", alpha = 0.04,
size = 0.2) + ggplot2::geom_sf(data = training,
ggplot2::aes(color = get(species)), show.legend = "point",
alpha = 0.7, size = 2) + ggplot2::labs(color = species) +
ggplot2::ggtitle("Training set") + theme(plot.title = element_text(hjust = 0.5, size = 10))
pts <- basePlot + ggplot2::geom_sf(data = plotPoly,
color = "red", fill = "orangered4", alpha = 0.04,
size = 0.2) + ggplot2::geom_sf(data = testing,
ggplot2::aes(color = get(species)), show.legend = "point",
alpha = 0.7, size = 2) + ggplot2::labs(color = species) +
ggplot2::ggtitle("Testing set") + theme(plot.title = element_text(hjust = 0.5, size = 10))
}
else {
ptr <- basePlot + ggplot2::geom_sf(data = training,
ggplot2::aes(color = get(species)), show.legend = "point",
alpha = 0.7, size = 2) + ggplot2::labs(color = species) +
ggplot2::ggtitle("Training set") + theme(plot.title = element_text(hjust = 0.5, size = 10))
pts <- basePlot + ggplot2::geom_sf(data = testing,
ggplot2::aes(color = get(species)), show.legend = "point",
alpha = 0.7, size = 2) + ggplot2::labs(color = species) +
ggplot2::ggtitle("Testing set") + theme(plot.title = element_text(hjust = 0.5, size = 10))
}
}
#ptr_pts<-ggpubr::ggarrange(ptr, pts,common.legend = TRUE)
#plot(cowplot::plot_grid(ptr, pts))
#plot(ggpubr::ggarrange(ptr,records.p, pts))
plot(ggpubr::ggarrange(ptr, pts,common.legend = TRUE))
}
################end function
summarise_fold<-function(sb){
records<-sb$records
records$fold<-1:nrow(records)
records <- records[,c(5,1,2,3,4)] %>%
mutate(Pourcentage= round((test_0 + test_1)*100/(test_0 + test_1+train_1 + train_0),digits = 0))
plot(ggpubr::ggtexttable(records,rows = NULL, theme = ttheme("mGreen")))
}
##########end function
ggR_Predict<-function(RasterLayer){
ggR(RasterLayer,geom_raster = TRUE,ggLayer = F) +
scale_fill_gradientn(name = "", colours = rev(terrain.colors(10)))  +
theme_bw() + xlab("Longitude") + ylab("Latitude") +
ggtitle(label = names(RasterLayer)) + theme(plot.title = element_text(hjust = 0.5, size = 10))
}
ggR_Predict2<-function(RasterLayer1,RasterLayer2){
g1<-ggR(RasterLayer1,geom_raster = TRUE,ggLayer = F) +
scale_fill_gradientn(name = "", colours = rev(terrain.colors(10)))  +
theme_bw() + xlab("Longitude") + ylab("Latitude") +
ggtitle(label = "(a)") + theme(plot.title = element_text(hjust = 0.5, size = 10))
g2<-ggR(RasterLayer2,geom_raster = TRUE,ggLayer = F) +
scale_fill_gradientn(name = "", colours = rev(terrain.colors(10)))  +
theme_bw() + xlab("Longitude") + ylab("Latitude") +
ggtitle(label = "(b)") + theme(plot.title = element_text(hjust = 0.5, size = 10))
ggpubr::ggarrange(g1,g2,common.legend=TRUE)
}
#### presence absence function
PASpecies<-function ( rasterLayer){
#speciesData <- sf::st_as_sf(speciesData)
samp <- raster::sampleRegular(rasterLayer, 5e+05, asRaster = TRUE)
map_df <- raster::as.data.frame(samp, xy = TRUE, centroids = TRUE,
na.rm = TRUE)
colnames(map_df) <- c("Easting", "Northing", "MAP")
basePlot <- ggplot2::ggplot() + ggplot2::geom_raster(data = map_df,
ggplot2::aes_string(y = "Northing", x = "Easting", fill = "MAP"))
# ptr <- basePlot + ggplot2::geom_sf(data = speciesData,
#                                    alpha = 0.7, color = "blue", size = 1) +
#   ggplot2::theme_bw() + ggplot2::labs(x = "", y = "")
# # +
#   ggtitle(label = names(rasterLayer)) + theme(plot.title = element_text(hjust = 0.5, size = 10))
# plot(cowplot::plot_grid(ptr))
basePlot<-basePlot + ggplot2::theme_bw() + ggplot2::labs(x = "Longitude", y = "Latitude") + ggtitle(label = names(rasterLayer)) + theme(plot.title = element_text(hjust = 0.5, size = 10))+scale_fill_manual(values=c("white","green"),name="EspÃ¨ce",labels=c("Absence","PrÃ©sence"))
return(basePlot)
}
####
PASpecies2<-function ( rasterLayer1,rasterLayer2){
#speciesData <- sf::st_as_sf(speciesData)
samp <- raster::sampleRegular(rasterLayer1, 5e+05, asRaster = TRUE)
map_df <- raster::as.data.frame(samp, xy = TRUE, centroids = TRUE,
na.rm = TRUE)
colnames(map_df) <- c("Easting", "Northing", "MAP")
basePlot1 <- ggplot2::ggplot() + ggplot2::geom_raster(data = map_df,
ggplot2::aes_string(y = "Northing", x = "Easting", fill = "MAP"))
basePlot1<-basePlot1 + ggplot2::theme_bw() + ggplot2::labs(x = "Longitude", y = "Latitude") + ggtitle(label = "(a)") + theme(plot.title = element_text(hjust = 0.5, size = 10))+scale_fill_manual(values=c("white","green"),name="EspÃ¨ce",labels=c("Absence","PrÃ©sence"))
samp <- raster::sampleRegular(rasterLayer2, 5e+05, asRaster = TRUE)
map_df <- raster::as.data.frame(samp, xy = TRUE, centroids = TRUE,
na.rm = TRUE)
colnames(map_df) <- c("Easting", "Northing", "MAP")
basePlot2 <- ggplot2::ggplot() + ggplot2::geom_raster(data = map_df,
ggplot2::aes_string(y = "Northing", x = "Easting", fill = "MAP"))
basePlot2<-basePlot2 + ggplot2::theme_bw() + ggplot2::labs(x = "Longitude", y = "Latitude") + ggtitle(label = "(b)") + theme(plot.title = element_text(hjust = 0.5, size = 10))+scale_fill_manual(values=c("white","green"),name="EspÃ¨ce",labels=c("Absence","PrÃ©sence"))
ggpubr::ggarrange(basePlot1,basePlot2,common.legend = TRUE)
}
Dist<-function ( rasterLayer, speciesData){
speciesData <- sf::st_as_sf(speciesData)
samp <- raster::sampleRegular(rasterLayer, 5e+05, asRaster = TRUE)
map_df <- raster::as.data.frame(samp, xy = TRUE, centroids = TRUE,
na.rm = TRUE)
colnames(map_df) <- c("Easting", "Northing", "MAP")
basePlot <- ggplot2::ggplot() + ggplot2::geom_raster(data = map_df,
ggplot2::aes_string(y = "Northing", x = "Easting", fill = "MAP")) +
ggplot2::scale_fill_gradientn(name = "", colours = rev(terrain.colors(10)))
ptr <- basePlot + ggplot2::geom_sf(data = speciesData,
alpha = 0.7, color = "blue", size = 1) +
ggplot2::theme_bw() + ggplot2::labs(x = "", y = "")
# +
#   ggtitle(label = names(rasterLayer)) + theme(plot.title = element_text(hjust = 0.5, size = 10))
# plot(cowplot::plot_grid(ptr))
return(ptr)
}
#######"import species
Recodificateur <- function(data,espece,varying){
for (lag_size in espece) {
data <- data %>%
dplyr::mutate(!!sym(lag_size) := as.factor(ifelse(varying == lag_size,1,0)))
}
return(data)
}
######construire des bases des espÃ¨ces choisies
Base<-function(Species,coord,espece){
Species<-st_drop_geometry(Species)
data<-list()
for (i in 1:length(espece)) {
data[[espece[i]]]<-Species[,c(coord[1],coord[2],espece[i])]
# %>%
#   dplyr::select(coord[1],coord[2],espece[i])
}
return(data)
}
Selectpredictors<-function(RasterStack,predictors){
if(length(predictors)==1){
p<- raster::subset(RasterStack,predictors[[1]])
p<-list(p)
names(p)<-names(predictors)
return(p)
}
else{
var<-names(predictors)
s<-list()
p<- raster::subset(RasterStack,predictors[[1]])
s[[var[1]]]<-p
for (i in 2:length(predictors)) {
p<- raster::subset(RasterStack,predictors[[i]])
s[[var[i]]]<-p
}
return (s)
}
}
filename<-paste0("C:\\Users\\Hp\\OneDrive\\cirad\\Data\\BD_Arbre","\\arbres_diohine_mai2018_par_Zone_OK_BON.shp")
Species<-st_read(filename,quiet = T)
espece=list()
espece = c("Faidherbia albida","Balanites aegyptiaca","Anogeissus leiocarpus",
"Adansonia digitata","Acacia nilotica")
Species <- Recodificateur(data = Species,espece = espece,varying = Species$Species)
coord<-list()
coord<-c("xcoord","ycoord") #les variables sur la longitude=xcoord et la latitude=ycoord
Base<-Base(Species,coord,espece)
lsoil<-list.files("D:\\Stage_SDM\\SDM\\Data\\SoilGrids_250m\\",patt="\\.tif")
lsoil<-sprintf("D:\\Stage_SDM\\SDM\\Data\\SoilGrids_250m\\%s",lsoil)
e<-extent(-16.542,-16.348,14.45,14.64)
AETI<-raster(lsoil[1])
AETI.crop<-crop(AETI,e)
names(AETI.crop)<-"AETI"
CLYPPT<-raster(lsoil[2])
CLYPPT.crop<-crop(CLYPPT,e)
names(CLYPPT.crop)<-"CLYPPT"
ORCDRC<-raster(lsoil[3])
ORCDRC.crop<-crop(ORCDRC,e)
names(ORCDRC.crop)<-"ORCDRC"
PHIHOX<-raster(lsoil[4])
PHIHOX.crop<-crop(PHIHOX,e)
names(PHIHOX.crop)<-"PHIHOX"
SLTPPT<-raster(lsoil[5])
SLTPPT.crop<-crop(SLTPPT,e)
names(SLTPPT.crop)<-"SLTPPT"
SNDPPT<-raster(lsoil[6])
SNDPPT.crop<-crop(SNDPPT,e)
names(SNDPPT.crop)<-"SNDPPT"
NTO<-raster(lsoil[7])
NTO.crop<-crop(NTO,e)
names(NTO.crop)<-"NTO"
P<-raster(lsoil[8])
P.crop<-crop(P,e)
names(P.crop)<-"P"
NBWP<-raster(lsoil[9])
NBWP.crop<-crop(NBWP,e)
names(NBWP.crop)<-"NBWP"
SINT<-raster(lsoil[10])
SINT.crop<-crop(SINT,e)
names(SINT.crop)<-"SINT"
SOS<-raster(lsoil[11])
SOS.crop<-crop(SOS,e)
names(SOS.crop)<-"SOS"
##################"
AETI<-projectRaster(AETI.crop,P.crop)
CLYPPT<-projectRaster(CLYPPT.crop,P.crop)
#extent(CLYPPT)<-extent(P.crop)
ORCDRC<-projectRaster(ORCDRC.crop,P.crop)
#extent(ORCDRC)<-extent(P.crop)
PHIHOX<-projectRaster(PHIHOX.crop,P.crop)
fun <- function(x) { x / 10 }
PHIHOX<-calc(PHIHOX,fun)
names(PHIHOX)<-"PHIHOX"
SLTPPT<-projectRaster(SLTPPT.crop,P.crop)
NTO<-projectRaster(NTO.crop,P.crop)
SNDPPT<-projectRaster(SNDPPT.crop,P.crop)
NBWP<-projectRaster(NBWP.crop,P.crop)
SINT<-projectRaster(SINT.crop,P.crop)
SOS<-projectRaster(SOS.crop,P.crop)
P<-P.crop
SoilGrid.crop<-stack(AETI,SINT,SOS,NBWP,CLYPPT,ORCDRC,PHIHOX,SLTPPT,NTO,SNDPPT,P)
###########
l1<-list.files("D:\\Stage_SDM\\SDM\\Data\\WorldClim\\wc2.0_30s_bio\\",patt="\\.tif")
l1<-sprintf("D:\\Stage_SDM\\SDM\\Data\\WorldClim\\wc2.0_30s_bio\\%s",l1)
worldclim<-stack(l1)
worldclim.crop <- crop(worldclim,e)
worldclim.crop<-projectRaster(worldclim.crop,P)
worldclim.crop<-stack(worldclim.crop)
topofilename<-paste0("C:\\Users\\Hp\\OneDrive\\Memoire_ITS4\\shpzones\\variables topographiques","\\topo.shp")
topo <- shapefile(topofilename,verbose=TRUE)
Slo1 <- rasterize(topo, P, field="Slo1")
names(Slo1)<-"Slo1"
Len1 <- rasterize(topo, P, field="Len1")
#plot(Len1)
names(Len1)<-"Len1"
#writeRaster(Len1, filename=file.path(tmp, "Len1.tif"), format="GTiff", overwrite=TRUE)
######
Sll <- rasterize(topo, P, field="Sll")
#plot(Sll) # valeur identique
names(Sll)<-"Sll"
#writeRaster(Sll, filename=file.path(tmp, "Sll.tif"), format="GTiff", overwrite=TRUE)
#####
Csl <- rasterize(topo, P, field="Csl")
#plot(Csl)
names(Csl)<-"Csl"
#writeRaster(Csl, filename=file.path(tmp, "Csl.tif"), format="GTiff", overwrite=TRUE)
####
Wid1 <- rasterize(topo, P, field="Wid1")
#plot(Wid1)
names(Wid1)<-"Wid1"
#writeRaster(Wid1, filename=file.path(tmp, "Wid1.tif"), format="GTiff", overwrite=TRUE)
#############
Dep1 <- rasterize(topo, P, field="Dep1")
#plot(Dep1)
names(Dep1)<-"Dep1"
#writeRaster(Dep1, filename=file.path(tmp, "Dep1.tif"), format="GTiff", overwrite=TRUE)
###########
Elev <- rasterize(topo, P, field="Elev")
#plot(Elev)
names(Elev)<-"Elev"
#writeRaster(Elev, filename=file.path(tmp, "Elev.tif"), format="GTiff", overwrite=TRUE)
###########
Vartopo<-stack(Slo1,Len1,Sll,Csl,Wid1,Dep1,Elev)
Variables<-stack(SoilGrid.crop,worldclim.crop,Vartopo)
#bio14=17,bio19=22,Sll=31
#names(Variables)
ENFA_var <- dropLayer(Variables, c(17, 22, 33))
Base_Faidherbia_Z<-Base$`Faidherbia albida`
names(Base_Faidherbia_Z)<-c("lon","lat","Faidherbia.albida")
FaidherbiaPr<- Base_Faidherbia_Z %>%
filter(Faidherbia.albida ==1)
#Transform data as SpatialPointDataFrame
sp::coordinates(FaidherbiaPr) <-~lon+lat
sp::proj4string(FaidherbiaPr) <-"+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"
Base_Balanites_Z<-Base$`Balanites aegyptiaca`
names(Base_Balanites_Z)<-c("lon","lat","Balanites.aegyptiaca")
BalanitesPr<- Base_Balanites_Z %>%
filter(Balanites.aegyptiaca ==1)
#Transform data as SpatialPointDataFrame
sp::coordinates(BalanitesPr) <-~lon+lat
sp::proj4string(BalanitesPr) <-"+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"
Base_Anogeissus_Z<-Base$`Anogeissus leiocarpus`
names(Base_Anogeissus_Z)<-c("lon","lat","Anogeissus.leiocarpus")
AnogeissusPr<- Base_Anogeissus_Z %>%
filter(Anogeissus.leiocarpus ==1)
#Transform data as SpatialPointDataFrame
sp::coordinates(AnogeissusPr) <-~lon+lat
sp::proj4string(AnogeissusPr) <-"+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"
Base_Adansonia_Z<-Base$`Adansonia digitata`
names(Base_Adansonia_Z)<-c("lon","lat","Adansonia.digitata")
AdansoniaPr<- Base_Adansonia_Z %>%
filter(Adansonia.digitata ==1)
#Transform data as SpatialPointDataFrame
sp::coordinates(AdansoniaPr) <-~lon+lat
sp::proj4string(AdansoniaPr) <-"+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"
Base_Acacia_Z<-Base$`Acacia nilotica`
names(Base_Acacia_Z)<-c("lon","lat","Acacia.nilotica")
AcaciaPr<- Base_Acacia_Z %>%
filter(Acacia.nilotica ==1)
#Transform data as SpatialPointDataFrame
sp::coordinates(AcaciaPr) <-~lon+lat
sp::proj4string(AcaciaPr) <-"+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"
glc <- GLcenfa(x = ENFA_var)
# correlation matrix
Z <- CENFA::parScale(ENFA_var)
mat <- CENFA::parCov(Z)
# ggcorrplot::ggcorrplot(mat,ggtheme = ggplot2::theme_gray,
#            hc.order = TRUE,
#            type = "lower",
#            lab = FALSE,
#            colors = c("#6D9EC1", "white", "#E46726"))
pa_dataF <- st_as_sf(Base_Faidherbia_Z, coords = c("lon","lat"), crs = crs(ENFA_var))
Cor <- raster::extract(ENFA_var, pa_dataF, df = TRUE)
Cor<-Cor[,-1]
# Add correlation significance level
# --------------------------------
# Argument p.mat
# Barring the no significant coefficient
p.mat <- ggcorrplot::cor_pmat(Cor)
ggcorrplot::ggcorrplot(mat,ggtheme = ggplot2::theme_gray,
hc.order = TRUE,
type = "lower",
p.mat = p.mat,
colors = c("#6D9EC1", "white", "#E46726"))
var_expli<-list()
var_explibio<-list()
FaidherbiaPr@data$Faidherbia.albida<-as.numeric(FaidherbiaPr@data$Faidherbia.albida)
mod.enfa <- CENFA::enfa(x = ENFA_var, s.dat = FaidherbiaPr, field = "Faidherbia.albida")
var_expli[[espece[1]]]<-dropLayer(ENFA_var,c("bio2","bio3","bio6"))
var_explibio[[espece[1]]]<-subset(ENFA_var,str_subset(names(var_expli[[1]]),"bio"))
CENFA::scatter(x = mod.enfa, y = glc,n=34,p=1)
#names(var_explibio[[1]])
BalanitesPr@data$Balanites.aegyptiaca<-as.numeric(BalanitesPr@data$Balanites.aegyptiaca)
mod.enfaB <- CENFA::enfa(x = ENFA_var, s.dat = BalanitesPr, field = "Balanites.aegyptiaca")
var_expli[[espece[2]]]<-dropLayer(ENFA_var,c("bio2","bio3","bio5","bio6","bio7","bio12","bio16"))
var_explibio[[espece[2]]]<-subset(ENFA_var,str_subset(names(var_expli[[2]]),"bio"))
CENFA::scatter(x = mod.enfaB, y = glc,n=34,p=1)
AnogeissusPr@data$Anogeissus.leiocarpus<-as.numeric(AnogeissusPr@data$Anogeissus.leiocarpus)
mod.enfaAno <- CENFA::enfa(x = ENFA_var, s.dat = AnogeissusPr, field = "Anogeissus.leiocarpus")
var_expli[[espece[3]]]<-dropLayer(ENFA_var,c("bio2","bio3","bio5","bio6","bio7","bio12","bio16"))
var_explibio[[espece[3]]]<-subset(ENFA_var,str_subset(names(var_expli[[3]]),"bio"))
CENFA::scatter(x = mod.enfaAno, y = glc,n=34,p=1)
AdansoniaPr@data$Adansonia.digitata<-as.numeric(AdansoniaPr@data$Adansonia.digitata)
mod.enfaAdan <- CENFA::enfa(x = ENFA_var, s.dat = AdansoniaPr, field = "Adansonia.digitata")
var_expli[[espece[4]]]<-dropLayer(ENFA_var,c("bio1","bio2","bio3","bio5","bio6","bio7","bio9",
"bio11","bio10","bio12","bio13","bio16","Csl","PHIHOX","SOS","SNPPT"))
var_explibio[[espece[4]]]<-subset(ENFA_var,str_subset(names(var_expli[[4]]),"bio"))
CENFA::scatter(x = mod.enfaAdan, y = glc,n=34,p=1)
AcaciaPr@data$Acacia.nilotica<-as.numeric(AcaciaPr@data$Acacia.nilotica)
mod.enfaAca <- CENFA::enfa(x = ENFA_var, s.dat = AcaciaPr, field = "Acacia.nilotica")
var_expli[[espece[5]]]<-dropLayer(ENFA_var,c("bio2","bio3","bio5","bio7","bio10","bio12","bio13","bio15","bio16"))
var_explibio[[espece[5]]]<-subset(ENFA_var,str_subset(names(var_expli[[5]]),"bio"))
CENFA::scatter(x = mod.enfaAca, y = glc,n=34,p=1)
sac<-spatialAutoRange(rasterLayer = ENFA_var, # raster file
doParallel = T,
showPlots = TRUE)
set.seed(1994)
sb <- spatialBlock(speciesData = pa_dataF,
species = "Faidherbia.albida",
rasterLayer = ENFA_var,
theRange = 8393, # size of the blocks
k = 5,
selection = "random",
iteration = 100, # find evenly dispersed folds
biomod2Format = FALSE,
xOffset = 0, # shift the blocks horizontally
yOffset = 0)
summarise_fold(sb)
Base[1]
Base[2]
length(espece)
Base_Faidherbia_Z
coord
pa_dataF <- st_as_sf(Base[1], coords = coord, crs = crs(ENFA_var))
Base[1]
coord
pa_dataF <- st_as_sf(Base[1], coords = c("xcoord","ycoord"), crs = crs(ENFA_var))
pa_dataF <- st_as_sf(Base_Faidherbia_Z, coords = coord, crs = crs(ENFA_var))
Base_Faidherbia_Z
Base[[1]]
pa_dataF <- st_as_sf(Base[[1]], coords = coord, crs = crs(ENFA_var))
for(k in 1:length(espece)){
pa_data[[espece[k]]]<-st_as_sf(Base[[k]], coords = coord, crs = crs(ENFA_var))
}
# make a SpatialPointsDataFrame object from data.frame
pa_data<-list()
for(k in 1:length(espece)){
pa_data[[espece[k]]]<-st_as_sf(Base[[k]], coords = coord, crs = crs(ENFA_var))
}
pa_data
pa_data[2]
names(pa_data[2])
pa_data[[espece[2]]]
sb <- spatialBlock(speciesData = pa_data[[espece[2]]],
species = espece[2],
rasterLayer = ENFA_var,
theRange = 8393, # size of the blocks
k = 5,
selection = "random",
iteration = 100, # find evenly dispersed folds
biomod2Format = FALSE,
xOffset = 0, # shift the blocks horizontally
yOffset = 0)
summarise_fold(sb)
spatialBlock<-list()
for(k in 1:length(espece)){
pa_data[[espece[k]]]<-st_as_sf(Base[[k]], coords = coord, crs = crs(ENFA_var))
spatialBlock[[espece[k]]]<-spatialBlock(speciesData = pa_data[[espece[k]]],
species = espece[k],
rasterLayer = ENFA_var,
theRange = 8393, # size of the blocks
k = 5,
showBlocks = FALSE,
selection = "random",
iteration = 100, # find evenly dispersed folds
biomod2Format = FALSE,
xOffset = 0, # shift the blocks horizontally
yOffset = 0)
}
for(k in 1:length(espece)){
pa_data[[espece[k]]]<-st_as_sf(Base[[k]], coords = coord, crs = crs(ENFA_var))
spatialBlock[[espece[k]]]<-spatialBlock(speciesData = pa_data[[espece[k]]],
species = espece[k],
rasterLayer = ENFA_var,
theRange = 8393, # size of the blocks
k = 5,
showBlocks = FALSE,
selection = "random",
iteration = 100, # find evenly dispersed folds
biomod2Format = FALSE,
xOffset = 0, # shift the blocks horizontally
yOffset = 0)
}
spatialBlock
sapatialBlock[1]
spatialBlock[1]
spatialBlock[1]$`Faidherbia albida`$folds
summarise_fold(spatialBlock[1]$`Faidherbia albida`)
summarise_fold(spatialBlock[1])
summarise_fold(spatialBlock[[1]])
summarise_fold(spatialBlock[[2]])
