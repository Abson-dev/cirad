scale_fill_gradientn(name = "bio1", colours = terrain.colors(100)) +
ggtitle("**Funkadelic**")  +
theme_bw() + annotation_scale(location = "bl", width_hint = 0.3) +
annotation_north_arrow(location = "bl", which_north = "true",
pad_x = unit(0.1, "in"), pad_y = unit(0.2, "in"),
style = north_arrow_fancy_orienteering) +
ggplot(map1)   +
geom_sf(data = z1, colour = "black", fill = NA)
ggR(bio1, geom_raster = TRUE,ggLayer = F) +
scale_fill_gradientn(name = "bio1", colours = terrain.colors(100)) +
ggtitle("**Funkadelic**")  +
theme_bw() + annotation_scale(location = "bl", width_hint = 0.3) +
annotation_north_arrow(location = "bl", which_north = "true",
pad_x = unit(0.1, "in"), pad_y = unit(0.2, "in"),
style = north_arrow_fancy_orienteering) +
geom_sf(data = z1, colour = "black", fill = NA)
ggR(bio1, geom_raster = TRUE,ggLayer = F) +
scale_fill_gradientn(name = "bio1", colours = terrain.colors(100))  +
theme_bw() + annotation_scale(location = "bl", width_hint = 0.3) +
annotation_north_arrow(location = "bl", which_north = "true",
pad_x = unit(0.1, "in"), pad_y = unit(0.2, "in"),
style = north_arrow_fancy_orienteering) +
geom_sf(data = z1, colour = "black", fill = NA)
ggR(bio1, geom_raster = TRUE,ggLayer = F) +
scale_fill_gradientn(name = "Température moyenne annuelle", colours = terrain.colors(100))  +
theme_bw() + annotation_scale(location = "bl", width_hint = 0.3) +
annotation_north_arrow(location = "bl", which_north = "true",
pad_x = unit(0.1, "in"), pad_y = unit(0.2, "in"),
style = north_arrow_fancy_orienteering) +
geom_sf(data = z1, colour = "black", fill = NA)
ggR(bio10, geom_raster = TRUE,ggLayer = F) +
scale_fill_gradientn(name = "Température moyenne annuelle", colours = terrain.colors(100))  +
theme_bw() + annotation_scale(location = "bl", width_hint = 0.3) +
annotation_north_arrow(location = "bl", which_north = "true",
pad_x = unit(0.1, "in"), pad_y = unit(0.2, "in"),
style = north_arrow_fancy_orienteering) +
geom_sf(data = z1, colour = "black", fill = NA)
ggR(bio1, geom_raster = TRUE,ggLayer = F) +
scale_fill_gradientn(name = "Température moyenne annuelle", colours = terrain.colors(100))  +
theme_bw() + annotation_scale(location = "bl", width_hint = 0.3) +
annotation_north_arrow(location = "bl", which_north = "true",
pad_x = unit(0.1, "in"), pad_y = unit(0.2, "in"),
style = north_arrow_fancy_orienteering) +
geom_sf(data = z1, colour = "black", fill = NA)
ggR(bio1, geom_raster = TRUE,ggLayer = F) +
scale_fill_gradientn(name = "bio1", colours = terrain.colors(100))  +
theme_bw() + annotation_scale(location = "bl", width_hint = 0.3) +
annotation_north_arrow(location = "bl", which_north = "true",
pad_x = unit(0.1, "in"), pad_y = unit(0.2, "in"),
style = north_arrow_fancy_orienteering) +
geom_sf(data = z1, colour = "black", fill = NA)
ggR(bio1, geom_raster = TRUE,ggLayer = F) +
scale_fill_gradientn(name = "bio1", colours = terrain.colors(100))  +
theme_bw() + annotation_scale(location = "bl", width_hint = 0.3) +
annotation_north_arrow(location = "bl", which_north = "true",
pad_x = unit(0.1, "in"), pad_y = unit(0.2, "in"),
style = north_arrow_fancy_orienteering) +
geom_sf(data = z1, colour = "black", fill = NA)
ggR(bio1, geom_raster = TRUE,ggLayer = F) +
scale_fill_gradientn(name = "bio1", colours = terrain.colors(100))  +
theme_bw() + annotation_scale(location = "bl", width_hint = 0.3) +
annotation_north_arrow(location = "bl", which_north = "true",
pad_x = unit(0.1, "in"), pad_y = unit(0.2, "in"),
style = north_arrow_fancy_orienteering) +
geom_sf(aes(color = Faidherbia)) +
geom_sf(data = z1, colour = "black", fill = NA)
ggR(bio1, geom_raster = TRUE,ggLayer = F) +
scale_fill_gradientn(name = "bio1", colours = terrain.colors(100))  +
theme_bw() + annotation_scale(location = "bl", width_hint = 0.3) +
annotation_north_arrow(location = "bl", which_north = "true",
pad_x = unit(0.1, "in"), pad_y = unit(0.2, "in"),
style = north_arrow_fancy_orienteering)  +
geom_sf(data = z1, colour = "black", fill = NA)
ggR(bio1, geom_raster = TRUE,ggLayer = F) +
scale_fill_gradientn(name = "bio1", colours = terrain.colors(100))
theme_bw()
ggR(bio1, geom_raster = TRUE,ggLayer = F) +
scale_fill_gradientn(name = "bio1", colours = terrain.colors(100))  +
theme_bw() + annotation_scale(location = "bl", width_hint = 0.3) +
annotation_north_arrow(location = "bl", which_north = "true",
pad_x = unit(0.1, "in"), pad_y = unit(0.2, "in"),
style = north_arrow_fancy_orienteering)  +
geom_sf(data = z1, colour = "black", fill = NA)
ggR(r, geom_raster = TRUE,ggLayer = F) +
scale_fill_gradientn(name = "bio1", colours = terrain.colors(100))  +
theme_bw() + annotation_scale(location = "bl", width_hint = 0.3) +
annotation_north_arrow(location = "bl", which_north = "true",
pad_x = unit(0.1, "in"), pad_y = unit(0.2, "in"),
style = north_arrow_fancy_orienteering)  +
geom_sf(data = z1, colour = "black", fill = NA)
ggR(bio1, geom_raster = TRUE,ggLayer = F) +
scale_fill_gradientn(name = "bio1", colours = terrain.colors(100))  +
theme_bw() + annotation_scale(location = "bl", width_hint = 0.3) +
annotation_north_arrow(location = "bl", which_north = "true",
pad_x = unit(0.1, "in"), pad_y = unit(0.2, "in"),
style = north_arrow_fancy_orienteering)  +
geom_sf(data = z1, colour = "black", fill = NA)
ggR(bio1, geom_raster = TRUE,ggLayer = F) +
scale_fill_gradientn(name = "bio1", colours = terrain.colors(100))  +
theme_bw() + annotation_scale(location = "bl", width_hint = 0.3) +
annotation_north_arrow(location = "bl", which_north = "true",
pad_x = unit(0.1, "in"), pad_y = unit(0.2, "in"),
style = north_arrow_fancy_orienteering)  +
geom_sf(data = zone_etude, colour = "black", fill = NA)
ggR(bio1, geom_raster = TRUE,ggLayer = F) +
scale_fill_gradientn(name = "bio1", colours = terrain.colors(100))  +
theme_bw() + annotation_scale(location = "bl", width_hint = 0.3) +
annotation_north_arrow(location = "bl", which_north = "true",
pad_x = unit(0.1, "in"), pad_y = unit(0.2, "in"),
style = north_arrow_fancy_orienteering)  +
geom_sf(data = z, colour = "black", fill = NA)
ggR(bio1, geom_raster = TRUE,ggLayer = F) +
scale_fill_gradientn(name = "bio1", colours = terrain.colors(100))  +
theme_bw() + annotation_scale(location = "bl", width_hint = 0.3) +
annotation_north_arrow(location = "bl", which_north = "true",
pad_x = unit(0.1, "in"), pad_y = unit(0.2, "in"),
style = north_arrow_fancy_orienteering)  +
geom_sf(data = z2, colour = "black", fill = NA)
ggR(bio1, geom_raster = TRUE,ggLayer = F) +
scale_fill_gradientn(name = "bio1", colours = terrain.colors(100))  +
theme_bw() + annotation_scale(location = "bl", width_hint = 0.3) +
annotation_north_arrow(location = "bl", which_north = "true",
pad_x = unit(0.1, "in"), pad_y = unit(0.2, "in"),
style = north_arrow_fancy_orienteering)  +
geom_sf(data = z2, colour = "red", fill = NA)
ggR(bio1, geom_raster = TRUE,ggLayer = F) +
scale_fill_gradientn(name = "bio1", colours = terrain.colors(100))  +
theme_bw() + annotation_scale(location = "bl", width_hint = 0.3) +
annotation_north_arrow(location = "bl", which_north = "true",
pad_x = unit(0.1, "in"), pad_y = unit(0.2, "in"),
style = north_arrow_fancy_orienteering)  +
geom_sf(data = z2, colour = "blue", fill = NA)
ggR(r, geom_raster = TRUE,ggLayer = F) +
scale_fill_gradientn(name = "bio1", colours = terrain.colors(100))  +
theme_bw() + annotation_scale(location = "bl", width_hint = 0.3) +
annotation_north_arrow(location = "bl", which_north = "true",
pad_x = unit(0.1, "in"), pad_y = unit(0.2, "in"),
style = north_arrow_fancy_orienteering)  +
geom_sf(data = z2, colour = "blue", fill = NA)
ggR(r, geom_raster = TRUE,ggLayer = F) +
scale_fill_gradientn(name = "bio1", colours = terrain.colors(100))  +
theme_bw() + annotation_scale(location = "bl", width_hint = 0.3) +
annotation_north_arrow(location = "bl", which_north = "true",
pad_x = unit(0.1, "in"), pad_y = unit(0.2, "in"),
style = north_arrow_fancy_orienteering)  +
geom_sf(data = z1, colour = "blue", fill = NA)
r <- raster(worldClim.crop, layer=1)
r <- mask(r, z1)
plot(r)
plot(z1, add=TRUE, lwd=1)
ggR(r, geom_raster = TRUE,ggLayer = F) +
scale_fill_gradientn(name = "bio1", colours = terrain.colors(100))  +
theme_bw() + annotation_scale(location = "bl", width_hint = 0.3) +
annotation_north_arrow(location = "bl", which_north = "true",
pad_x = unit(0.1, "in"), pad_y = unit(0.2, "in"),
style = north_arrow_fancy_orienteering)  +
geom_sf(data = z1, colour = "blue", fill = NA)
ggR(bio1, geom_raster = TRUE,ggLayer = F) +
scale_fill_gradientn(name = "bio1", colours = terrain.colors(100))  +
theme_bw() + annotation_scale(location = "bl", width_hint = 0.3) +
annotation_north_arrow(location = "bl", which_north = "true",
pad_x = unit(0.1, "in"), pad_y = unit(0.2, "in"),
style = north_arrow_fancy_orienteering)  +
geom_sf(data = z1, colour = "blue", fill = NA)
ggplot(map1)   +
ggR(bio1, geom_raster = TRUE,ggLayer = F) +
scale_fill_gradientn(name = "bio1", colours = terrain.colors(100))  +
theme_bw() + annotation_scale(location = "bl", width_hint = 0.3) +
annotation_north_arrow(location = "bl", which_north = "true",
pad_x = unit(0.1, "in"), pad_y = unit(0.2, "in"),
style = north_arrow_fancy_orienteering)  +
geom_sf(data = z1, colour = "blue", fill = NA)
DataModelFZ1<-dataFZ1@data
View(DataModelFZ1)
table(DataModelFZ1$Faidherbia)
table(DataModelFZ1$bio1)
summarise(DataModelFZ1)
summarize(DataModelFZ1)
summarize(DataModelFZ1$bio1)
DataModelFZ1
##################Modélisation
#Examinons d'abord un modèle d'arbres de classification et de régression (CART).
library(rpart)
cart <- rpart(Faidherbia~., data=DataModelFZ1)
printcp(cart)
plotcp(cart)
plotcp(cart)
plot(cart, uniform=TRUE, main="Regression Tree")
# text(cart, use.n=TRUE, all=TRUE, cex=.8)
text(cart, cex=.8, digits=1)
library(randomForest)
fpa <- as.factor(DataModelFZ1[, 'Faidherbia'])
crf <- randomForest(DataModelFZ1[, 2:ncol(dw)], fpa)
crf <- randomForest(DataModelFZ1[, 2:ncol(DataModelFZ1)], fpa)
crf
plot(crf)
plot(crf)
varImpPlot(crf)
install.packages("blockCV")
library(blockCV)
library(SDMSelect)
########"Modélisation de Faidherbia albida dans la zone 1
##zone 1
library(SDMSelect)
library(dplyr)
library(sf)
library(raster)
library(rasterVis)
library(RStoolbox)
library(maptools)
# import presence-absence species data
PA <- read.csv(system.file("extdata", "PA.csv", package = "blockCV"))
View(PA)
# coordinate reference system
Zone55s <- "+proj=utm +zone=55 +south +ellps=GRS80 +units=m +no_defs"
# make a sf object from data.frame
pa_data <- sf::st_as_sf(PA, coords = c("x", "y"), crs = Zone55s)
View(pa_data)
# buffering with presence-absence data
bf1 <- buffering(speciesData= pa_data,
species= "Species",
theRange= 70000,
spDataType = "PA",
progress = TRUE)
bf1
# buffering with presence-background data
bf2 <- buffering(speciesData= pb_data,
species= "Species",
theRange= 70000,
spDataType = "PB",
addBG = TRUE, # add background data to testing folds
progress = TRUE)
# make a sf object from data.frame
pb_data <- sf::st_as_sf(PB, coords = c("x", "y"), crs = Zone55s)
# import presence-background species data
PB <- read.csv(system.file("extdata", "PB.csv", package = "blockCV"))
# make a sf object from data.frame
pb_data <- sf::st_as_sf(PB, coords = c("x", "y"), crs = Zone55s)
# buffering with presence-background data
bf2 <- buffering(speciesData= pb_data,
species= "Species",
theRange= 70000,
spDataType = "PB",
addBG = TRUE, # add background data to testing folds
progress = TRUE)
# buffering with presence-background data
bf2 <- buffering(speciesData= pb_data,
species= "Species",
theRange= 70000,
spDataType = "PB",
addBG = TRUE, # add background data to testing folds
progress = TRUE)
# load package data
awt <- raster::brick(system.file("extdata", "awt.grd", package = "blockCV"))
# import presence-absence species data
PA <- read.csv(system.file("extdata", "PA.csv", package = "blockCV"))
# make a sf object from data.frame
pa_data <- sf::st_as_sf(PA, coords = c("x", "y"), crs = raster::crs(awt))
# environmental clustering
eb <- envBlock(rasterLayer = awt,
speciesData = pa_data,
species = "Species", # name of the column with response
k = 5,
standardization = "standard",
rasterBlock = TRUE)
eb
if(interactive()){
# load package data
awt <- raster::brick(system.file("extdata", "awt.grd", package = "blockCV"))
# import presence-absence species data
PA <- read.csv(system.file("extdata", "PA.csv", package = "blockCV"))
# make a sf object from data.frame
pa_data <- sf::st_as_sf(PA, coords = c("x", "y"), crs = raster::crs(awt))
# spatial blocking by specified range and random assignment
sb <- spatialBlock(speciesData = pa_data,
species = "Species",
rasterLayer = awt,
theRange = 70000,
k = 5,
selection = "random",
iteration = 100)
foldExplorer(sb, awt, pa_data)
# buffering with presence-absence data
bf <- buffering(speciesData= pa_data,
species= "Species", # to count the number of presences and absences
theRange= 70000,
spDataType = "PA",
progress = TRUE)
foldExplorer(bf, awt, pa_data)
# environmental clustering
eb <- envBlock(rasterLayer = awt,
speciesData = pa_data,
species = "Species",
k = 5)
foldExplorer(eb, awt, pa_data)
}
if(interactive()){
# load package data
awt <- raster::brick(system.file("extdata", "awt.grd", package = "blockCV"))
# import presence-absence species data
PA <- read.csv(system.file("extdata", "PA.csv", package = "blockCV"))
# make a sf object from data.frame
pa_data <- sf::st_as_sf(PA, coords = c("x", "y"), crs = raster::crs(awt))
rangeExplorer(rasterLayer = awt) # the only mandatory input
# add species data to add them on the map
rangeExplorer(rasterLayer = awt,
speciesData = pa_data,
species = "Species",
rangeTable = NULL,
minRange = 30000, # limit the search domain
maxRange = 100000)
}
# load the example raster data
awt <- raster::brick(system.file("extdata", "awt.grd", package = "blockCV"))
# run the model in parallel
range1 <- spatialAutoRange(rasterLayer = awt,
sampleNumber = 5000, # number of cells to be used
doParallel = TRUE,
nCores = 2, # if NULL, it uses half of the CPU cores
plotVariograms = FALSE,
showPlots = TRUE)
if(interactive()){
# load package data
awt <- raster::brick(system.file("extdata", "awt.grd", package = "blockCV"))
# import presence-absence species data
PA <- read.csv(system.file("extdata", "PA.csv", package = "blockCV"))
# make a sf object from data.frame
pa_data <- sf::st_as_sf(PA, coords = c("x", "y"), crs = raster::crs(awt))
rangeExplorer(rasterLayer = awt) # the only mandatory input
# add species data to add them on the map
rangeExplorer(rasterLayer = awt,
speciesData = pa_data,
species = "Species",
rangeTable = NULL,
minRange = 30000, # limit the search domain
maxRange = 100000)
}
awt
#############"
zone_etude1<-shapefile("C:\\Users\\Hp\\OneDrive\\Memoire_ITS4\\shpzones\\Zone_1_BON.shp")
z1<-st_as_sf(zone_etude1)
#########
filename<-paste0("D:\\Stage_SDM\\SDM\\Data\\BD_Arbre","\\arbres_diohine_mai2018_par_Zone_OK_BON.shp")
Species<-st_read(filename,quiet = T)
Base_Espece<-Species
Base_Espece$Faidherbia_albida<-if_else(Base_Espece$Species =="Faidherbia albida","1","0")
Base_Espece$Faidherbia_albida<-as.factor(Base_Espece$Faidherbia_albida)
#####supprimer la géométrie afin de pouvoir faire quelques manipulations
data_df<-st_drop_geometry(Base_Espece)
##########???les espèces dans les différentes zones
Base_Espece_Zone1<-data_df %>%
filter(Zone == 1)
Base_Faidherbia_Z1<-Base_Espece_Zone1 %>%
select(xcoord,ycoord,Faidherbia_albida)
names(Base_Faidherbia_Z1)<-c("lon","lat","Faidherbia")
FZ1<-Base_Faidherbia_Z1
#Transform data as SpatialPointDataFrame
sp::coordinates(FZ1) <-~lon+lat
sp::proj4string(FZ1) <-"+proj=longlat +datum=WGS84"
########↨importation des données de worldclim
###1)prendre les fichiers .tif(raster) qui se trouvent dans le dossier indiquer
l1<-list.files("D:\\Stage_SDM\\SDM\\Data\\WorldClim\\wc2.0_30s_bio\\",patt="\\.tif")
l1<-sprintf("D:\\Stage_SDM\\SDM\\Data\\WorldClim\\wc2.0_30s_bio\\%s",l1)
dataFZ1<-CovarExtract(x=FZ1,cov.paths = l1) # en utilsisant SDMSelect
########"Modélisation de Faidherbia albida dans la zone 1
##zone 1
library(SDMSelect)
dataFZ1<-CovarExtract(x=FZ1,cov.paths = l1) # en utilsisant SDMSelect
DataModelFZ1<-dataFZ1@data
##zone 1
filename_PA_Z1<-paste0("C:\\Users\\Hp\\Desktop\\Model","\\dataFZ1.shp")
PA_FZ1<-shapefile(filename_PA_Z1)
map1<-st_as_sf(PA_FZ1)
map1$Faidherbia<-if_else(map1$Faidherbia ==1,"présence","absence")
map1$Faidherbia<-as.factor(map1$Faidherbia)
###########répresentation graphique des présence/absence de Faidherbia albida dans les zones
plotPAZ1<-ggplot(map1)   +
geom_sf(aes(color = Faidherbia)) +
geom_sf(data = z1, colour = "black", fill = NA)  +
theme_bw() + annotation_scale(location = "bl", width_hint = 0.3) +
annotation_north_arrow(location = "bl", which_north = "true",
pad_x = unit(0.1, "in"), pad_y = unit(0.2, "in"),
style = north_arrow_fancy_orienteering)
library(ggplot2)
library(ggspatial)
library(spdep)
library(RStoolbox)
library(maptools)
###########répresentation graphique des présence/absence de Faidherbia albida dans les zones
plotPAZ1<-ggplot(map1)   +
geom_sf(aes(color = Faidherbia)) +
geom_sf(data = z1, colour = "black", fill = NA)  +
theme_bw() + annotation_scale(location = "bl", width_hint = 0.3) +
annotation_north_arrow(location = "bl", which_north = "true",
pad_x = unit(0.1, "in"), pad_y = unit(0.2, "in"),
style = north_arrow_fancy_orienteering)
plotPAZ1
#Extraire un seul RasterLayer d'un RasterBrick (ou RasterStack).
#r <- raster(b, layer=2)
###)connaitre l'étendue de notre zone d'étude (ext)
ext<-raster::extent(Species)
# class      : Extent
# xmin       : -16.53864
# xmax       : -16.35454
# ymin       : 14.45461
# ymax       : 14.63543
worlClim<-stack(l1)
###)utiliser crop pour mettre a la même zone d'étude les données de worlclim
worldClim.crop<-crop(worlClim,ext)
View(PA)
PA_FZ1
DataModelFZ1
FZ1
Base_Faidherbia_Z1
# add species data to add them on the map
rangeExplorer(rasterLayer = awt,
speciesData = pa_data,
species = "Faidherbia",
rangeTable = NULL,
minRange = 30000, # limit the search domain
maxRange = 100000)
# [1] "bio1"  "bio10" "bio11" "bio12" "bio13" "bio14" "bio15" "bio16"
# [9] "bio17" "bio18" "bio19" "bio2"  "bio3"  "bio4"  "bio5"  "bio6"
# [17] "bio7"  "bio8"  "bio9"
bio1 <- raster(worldClim.crop, layer=1)
# load package data
awt <- bio1
#en tenant compte du mask
# ggR(r, geom_raster = TRUE,ggLayer = F) +
#   scale_fill_gradientn(name = "bio1", colours = terrain.colors(100))  +
#   theme_bw() + annotation_scale(location = "bl", width_hint = 0.3) +
#   annotation_north_arrow(location = "bl", which_north = "true",
#                          pad_x = unit(0.1, "in"), pad_y = unit(0.2, "in"),
#                          style = north_arrow_fancy_orienteering)  +
#   geom_sf(data = z1, colour = "blue", fill = NA)
if(interactive()){
# load package data
awt <- bio1
# import presence-absence species data
PA <- Base_Faidherbia_Z1
# make a sf object from data.frame
pa_data <- sf::st_as_sf(PA, coords = c("lon", "lat"), crs = raster::crs(awt))
rangeExplorer(rasterLayer = awt) # the only mandatory input
# add species data to add them on the map
rangeExplorer(rasterLayer = awt,
speciesData = pa_data,
species = "Faidherbia",
rangeTable = NULL,
minRange = 30000, # limit the search domain
maxRange = 100000)
}
# load the example raster data
awt <- raster::brick(system.file("extdata", "awt.grd", package = "blockCV"))
# run the model in parallel
range1 <- spatialAutoRange(rasterLayer = awt,
sampleNumber = 5000, # number of cells to be used
doParallel = TRUE,
nCores = 2, # if NULL, it uses half of the CPU cores
plotVariograms = FALSE,
showPlots = TRUE)
awt <- raster::brick(system.file("extdata", "awt.grd", package = "blockCV"))
# import presence-absence species data
PA <- read.csv(system.file("extdata", "PA.csv", package = "blockCV"))
# make a sf object from data.frame
pa_data <- sf::st_as_sf(PA, coords = c("x", "y"), crs = raster::crs(awt))
# spatial blocking by specified range and random assignment
sb1 <- spatialBlock(speciesData = pa_data,
species = "Species",
theRange = 70000,
k = 5,
selection = "random",
iteration = 100,
numLimit = NULL,
biomod2Format = TRUE,
xOffset = 0.3, # shift the blocks horizontally
yOffset = 0)
# spatial blocking by row/column and systematic fold assignment
sb2 <- spatialBlock(speciesData = pa_data,
species = "Species",
rasterLayer = awt,
rows = 5,
cols = 8,
k = 5,
selection = "systematic",
biomod2Format = TRUE)
# spatial blocking by specified range and random assignment
sb <- spatialBlock(speciesData = pa_data, # sf or SpatialPoints
species = "Species", # the response column (binomial or multi-class)
rasterLayer = myrasters, # a raster for backgoround (optional)
theRange = 70000, # size of the blocks
k = 5, # the number of folds
selection = "random",
iteration = 100, # find evenly dispersed folds
biomod2Format = TRUE)
sb2
# load package data
awt <- bio1
# import presence-absence species data
PA <- Base_Faidherbia_Z1
# make a sf object from data.frame
pa_data <- sf::st_as_sf(PA, coords = c("lon", "lat"), crs = raster::crs(awt))
sb2 <- spatialBlock(speciesData = pa_data,
species = "Faidherbia",
rasterLayer = awt,
rows = 5,
cols = 8,
k = 5,
selection = "systematic",
biomod2Format = TRUE)
# load the example raster data
awt <- raster::brick(system.file("extdata", "awt.grd", package = "blockCV"))
plot(awt)
