map_df <- raster::as.data.frame(samp, xy = TRUE, centroids = TRUE,
na.rm = TRUE)
colnames(map_df) <- c("Easting", "Northing", "MAP")
basePlot1 <- ggplot2::ggplot() + ggplot2::geom_raster(data = map_df,
ggplot2::aes_string(y = "Northing", x = "Easting", fill = "MAP"))
basePlot1<-basePlot1 + ggplot2::theme_bw() + ggplot2::labs(x = "Longitude", y = "Latitude") + ggtitle(label = "(a)") + theme(plot.title = element_text(hjust = 0.5, size = 10))+scale_fill_manual(values=c("white","green"),name="EspÃ¨ce",labels=c("Absence","PrÃ©sence"))
samp <- raster::sampleRegular(rasterLayer2, 5e+05, asRaster = TRUE)
map_df <- raster::as.data.frame(samp, xy = TRUE, centroids = TRUE,
na.rm = TRUE)
colnames(map_df) <- c("Easting", "Northing", "MAP")
basePlot2 <- ggplot2::ggplot() + ggplot2::geom_raster(data = map_df,
ggplot2::aes_string(y = "Northing", x = "Easting", fill = "MAP"))
basePlot2<-basePlot2 + ggplot2::theme_bw() + ggplot2::labs(x = "Longitude", y = "Latitude") + ggtitle(label = "(b)") + theme(plot.title = element_text(hjust = 0.5, size = 10))+scale_fill_manual(values=c("white","green"),name="EspÃ¨ce",labels=c("Absence","PrÃ©sence"))
ggpubr::ggarrange(basePlot1,basePlot2,common.legend = TRUE)
}
Dist<-function ( rasterLayer, speciesData){
speciesData <- sf::st_as_sf(speciesData)
samp <- raster::sampleRegular(rasterLayer, 5e+05, asRaster = TRUE)
map_df <- raster::as.data.frame(samp, xy = TRUE, centroids = TRUE,
na.rm = TRUE)
colnames(map_df) <- c("Easting", "Northing", "MAP")
basePlot <- ggplot2::ggplot() + ggplot2::geom_raster(data = map_df,
ggplot2::aes_string(y = "Northing", x = "Easting", fill = "MAP")) +
ggplot2::scale_fill_gradientn(name = "", colours = rev(terrain.colors(10)))
ptr <- basePlot + ggplot2::geom_sf(data = speciesData,
alpha = 0.7, color = "blue", size = 1) +
ggplot2::theme_bw() + ggplot2::labs(x = "", y = "")
# +
#   ggtitle(label = names(rasterLayer)) + theme(plot.title = element_text(hjust = 0.5, size = 10))
# plot(cowplot::plot_grid(ptr))
return(ptr)
}
#######"import species
Recodificateur <- function(data,espece,varying){
for (lag_size in espece) {
data <- data %>%
dplyr::mutate(!!sym(lag_size) := as.factor(ifelse(varying == lag_size,1,0)))
}
return(data)
}
######construire des bases des espÃ¨ces choisies
Base<-function(Species,coord,espece){
Species<-st_drop_geometry(Species)
data<-list()
for (i in 1:length(espece)) {
data[[espece[i]]]<-Species[,c(coord[1],coord[2],espece[i])]
# %>%
#   dplyr::select(coord[1],coord[2],espece[i])
}
return(data)
}
Selectpredictors<-function(RasterStack,predictors){
if(length(predictors)==1){
p<- raster::subset(RasterStack,predictors[[1]])
p<-list(p)
names(p)<-names(predictors)
return(p)
}
else{
var<-names(predictors)
s<-list()
p<- raster::subset(RasterStack,predictors[[1]])
s[[var[1]]]<-p
for (i in 2:length(predictors)) {
p<- raster::subset(RasterStack,predictors[[i]])
s[[var[i]]]<-p
}
return (s)
}
}
chemin<-"C:\\Users\\Hp\\OneDrive\\cirad\\ParcFaidherbia\\Data\\BD_Arbres"
#data<-"arbres_diohine_mai2018_par_Zone_OK_BON.shp" # base des arbres du parc à faidherbia albida
data<-"bd_arbres_nioro.shp"
data<-paste0("\\",data)
filename<-paste0(chemin,data)
#########Importation de la base arbre
Species<-st_read(filename,quiet = T)
#Precisez les especes a modeliser
espece=c("Cordyla pinnata","Azadirachta indica")
# espece = c("Faidherbia albida","Balanites aegyptiaca","Anogeissus leiocarpus",
#            "Adansonia digitata","Acacia nilotica")
coord<-c("xcoord","ycoord") #les variables sur la longitude=xcoord et la latitude=ycoord
#coord<-c("Long","Lat")
# Species <- Recodificateur(data = Species,espece = espece,varying = Species$Species)
# Base<-Base(Species,coord,espece)
Species <- Recodificateur(data = Species,espece = espece,varying = Species$Espece)
Base<-Base(Species,coord,espece)
bc<-Base$`Cordyla pinnata`
#########Importation des Variables sur le Sol
lsoil<-list.files("F:\\Stage_SDM\\SoilGrids_250m\\",patt="\\.tif")
lsoil<-sprintf("D:\\Stage_SDM\\SoilGrids_250m\\%s",lsoil)
#e<-extent(-16.542,-15.70,13.67,14.64)
e<-extent(-15.89,-15.70,13.68,13.85)
AETI<-raster(lsoil[1])
chemin<-"C:\\Users\\Hp\\OneDrive\\cirad\\ParcFaidherbia\\Data\\BD_Arbres"
#data<-"arbres_diohine_mai2018_par_Zone_OK_BON.shp" # base des arbres du parc à faidherbia albida
data<-"bd_arbres_nioro.shp"
data<-paste0("\\",data)
filename<-paste0(chemin,data)
#########Importation de la base arbre
Species<-st_read(filename,quiet = T)
#Precisez les especes a modeliser
espece=c("Cordyla pinnata","Azadirachta indica")
# espece = c("Faidherbia albida","Balanites aegyptiaca","Anogeissus leiocarpus",
#            "Adansonia digitata","Acacia nilotica")
coord<-c("xcoord","ycoord") #les variables sur la longitude=xcoord et la latitude=ycoord
#coord<-c("Long","Lat")
# Species <- Recodificateur(data = Species,espece = espece,varying = Species$Species)
# Base<-Base(Species,coord,espece)
Species <- Recodificateur(data = Species,espece = espece,varying = Species$Espece)
Base<-Base(Species,coord,espece)
Base<-function(Species,coord,espece){
Species<-st_drop_geometry(Species)
data<-list()
for (i in 1:length(espece)) {
data[[espece[i]]]<-Species[,c(coord[1],coord[2],espece[i])]
# %>%
#   dplyr::select(coord[1],coord[2],espece[i])
}
return(data)
}
chemin<-"C:\\Users\\Hp\\OneDrive\\cirad\\ParcFaidherbia\\Data\\BD_Arbres"
#data<-"arbres_diohine_mai2018_par_Zone_OK_BON.shp" # base des arbres du parc à faidherbia albida
data<-"bd_arbres_nioro.shp"
data<-paste0("\\",data)
filename<-paste0(chemin,data)
#########Importation de la base arbre
Species<-st_read(filename,quiet = T)
#Precisez les especes a modeliser
espece=c("Cordyla pinnata","Azadirachta indica")
# espece = c("Faidherbia albida","Balanites aegyptiaca","Anogeissus leiocarpus",
#            "Adansonia digitata","Acacia nilotica")
coord<-c("xcoord","ycoord") #les variables sur la longitude=xcoord et la latitude=ycoord
#coord<-c("Long","Lat")
# Species <- Recodificateur(data = Species,espece = espece,varying = Species$Species)
# Base<-Base(Species,coord,espece)
Species <- Recodificateur(data = Species,espece = espece,varying = Species$Espece)
Base<-Base(Species,coord,espece)
#########Importation des Variables sur le Sol
lsoil<-list.files("F:\\Stage_SDM\\SoilGrids_250m\\",patt="\\.tif")
lsoil<-sprintf("F:\\Stage_SDM\\SoilGrids_250m\\%s",lsoil)
#e<-extent(-16.542,-15.70,13.67,14.64)
e<-extent(-15.89,-15.70,13.68,13.85)
AETI<-raster(lsoil[1])
AETI.crop<-crop(AETI,e)
names(AETI.crop)<-"AETI"
CLYPPT<-raster(lsoil[2])
CLYPPT.crop<-crop(CLYPPT,e)
names(CLYPPT.crop)<-"CLYPPT"
ORCDRC<-raster(lsoil[3])
ORCDRC.crop<-crop(ORCDRC,e)
names(ORCDRC.crop)<-"ORCDRC"
PHIHOX<-raster(lsoil[4])
PHIHOX.crop<-crop(PHIHOX,e)
names(PHIHOX.crop)<-"PHIHOX"
SLTPPT<-raster(lsoil[5])
SLTPPT.crop<-crop(SLTPPT,e)
names(SLTPPT.crop)<-"SLTPPT"
SNDPPT<-raster(lsoil[6])
SNDPPT.crop<-crop(SNDPPT,e)
names(SNDPPT.crop)<-"SNDPPT"
NTO<-raster(lsoil[7])
NTO.crop<-crop(NTO,e)
names(NTO.crop)<-"NTO"
P<-raster(lsoil[8])
P.crop<-crop(P,e)
names(P.crop)<-"P"
NBWP<-raster(lsoil[9])
NBWP.crop<-crop(NBWP,e)
names(NBWP.crop)<-"NBWP"
SINT<-raster(lsoil[10])
SINT.crop<-crop(SINT,e)
names(SINT.crop)<-"SINT"
SOS<-raster(lsoil[11])
SOS.crop<-crop(SOS,e)
names(SOS.crop)<-"SOS"
##################"
AETI<-projectRaster(AETI.crop,P.crop)
CLYPPT<-projectRaster(CLYPPT.crop,P.crop)
#extent(CLYPPT)<-extent(P.crop)
ORCDRC<-projectRaster(ORCDRC.crop,P.crop)
#extent(ORCDRC)<-extent(P.crop)
PHIHOX<-projectRaster(PHIHOX.crop,P.crop)
fun <- function(x) { x / 10 }
PHIHOX<-calc(PHIHOX,fun)
names(PHIHOX)<-"PHIHOX"
SLTPPT<-projectRaster(SLTPPT.crop,P.crop)
NTO<-projectRaster(NTO.crop,P.crop)
SNDPPT<-projectRaster(SNDPPT.crop,P.crop)
NBWP<-projectRaster(NBWP.crop,P.crop)
SINT<-projectRaster(SINT.crop,P.crop)
SOS<-projectRaster(SOS.crop,P.crop)
P<-P.crop
SoilGrid.crop<-stack(AETI,SINT,SOS,NBWP,CLYPPT,ORCDRC,PHIHOX,SLTPPT,NTO,SNDPPT,P)
###Importation des variables Worlclim
l1<-list.files("F:\\Stage_SDM\\WorldClim\\wc2.0_30s_bio\\",patt="\\.tif")
l1<-sprintf("F:\\Stage_SDM\\WorldClim\\wc2.0_30s_bio\\%s",l1)
worldclim<-stack(l1)
worldclim.crop <- crop(worldclim,e)
worldclim.crop<-projectRaster(worldclim.crop,P)
worldclim.crop<-stack(worldclim.crop)
#### Importation des variables topographiques
# topofilename<-paste0("C:\\Users\\Hp\\OneDrive\\Memoire_ITS4\\shpzones\\variables topographiques","\\topo.shp")
topofilename<-paste0("C:\\Users\\Hp\\OneDrive\\Memoire_ITS4\\shpzones\\variables topographiques\\nioro","\\topo_nioro.shp")
topo <- shapefile(topofilename,verbose=TRUE)
Slo1 <- rasterize(topo, P, field="Slo1")
#???plot(Slo1)
names(Slo1)<-"Slo1"
Len1 <- rasterize(topo, P, field="Len1")
#plot(Len1)
names(Len1)<-"Len1"
#writeRaster(Len1, filename=file.path(tmp, "Len1.tif"), format="GTiff", overwrite=TRUE)
######
Sll <- rasterize(topo, P, field="Sll")
#plot(Sll) # valeur identique
names(Sll)<-"Sll"
#writeRaster(Sll, filename=file.path(tmp, "Sll.tif"), format="GTiff", overwrite=TRUE)
#####
Csl <- rasterize(topo, P, field="Csl")
#plot(Csl)
names(Csl)<-"Csl"
#writeRaster(Csl, filename=file.path(tmp, "Csl.tif"), format="GTiff", overwrite=TRUE)
####
Wid1 <- rasterize(topo, P, field="Wid1")
#plot(Wid1)
names(Wid1)<-"Wid1"
#writeRaster(Wid1, filename=file.path(tmp, "Wid1.tif"), format="GTiff", overwrite=TRUE)
#############
Dep1 <- rasterize(topo, P, field="Dep1")
#plot(Dep1)
names(Dep1)<-"Dep1"
#writeRaster(Dep1, filename=file.path(tmp, "Dep1.tif"), format="GTiff", overwrite=TRUE)
###########
Elev <- rasterize(topo, P, field="Elev")
#plot(Elev)
names(Elev)<-"Elev"
#writeRaster(Elev, filename=file.path(tmp, "Elev.tif"), format="GTiff", overwrite=TRUE)
###########
#Sll
Vartopo<-stack(Slo1,Len1,Csl,Wid1,Dep1,Elev)
#???bio14
worldclim.crop<-dropLayer(worldclim.crop,6)
Variables<-stack(SoilGrid.crop,worldclim.crop,Vartopo)
#nlayers(Variables)
#ENFA_var <- dropLayer(Variables, c(17, 22, 33)) Faidherbia albida
ENFA_var <- Variables
#pr<- Base[[1]][Base[[1]][,ncol(Base[[1]])] == 1,]
BaseENFA<-function(Species,espece){
data<-list()
for (i in 1:length(espece)) {
data[[espece[i]]]<-Species[[i]][Species[[i]][,ncol(Species[[i]])] == 1,] %>% purrr::set_names("lon","lat",espece[i])
sp::coordinates(data[[espece[i]]]) <-~lon+lat
sp::proj4string(data[[espece[i]]]) <-"+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"
}
return(data)
}
BaseENFA<-BaseENFA(Base,espece)
# ENFASpecies<-function(BaseENFA,espece,ENFA_var){
#   mod.enfa<-list()
#   for (i in 1:length(espece)) {
#    BaseENFA[[i]]@data[[1]]<-as.numeric(BaseENFA[[i]]@data[[1]])
#    mod.enfa[[espece[i]]] <- CENFA::enfa(x = ENFA_var, s.dat = BaseENFA[[i]], field = espece[i])
#    }
#   return(mod.enfa)
# }
# ENFASpecies<-ENFASpecies(BaseENFA,espece,ENFA_var)
#
# ScatterSpecies<-function(ENFASpecies,espece,ENFA_var){
#   scatter.enfa<-list()
#   n=nlayers(ENFA_var)
#   glc <- CENFA::GLcenfa(x = ENFA_var)
#   for (i in 1:length(espece)){
#    scatter.enfa[[espece[1]]] <-CENFA::scatter(x = ENFASpecies[[1]], y = glc,n=35,p=1)
#   }
#   return(scatter.enfa)
# }
#
# Scatters<-ScatterSpecies(ENFASpecies,espece,ENFA_var)
########Vous devrer precisez apres ENFA quelles sont les variables qui expliquent chaque especes
##Indication: les graphes ci-dessous sont affiches en fonction des indices dans la liste espece()
# var_expli<-list()
# var_explibio<-list()
# var_expli[[espece[1]]]<-dropLayer(ENFA_var,c("bio2","bio3","bio6"))
# var_explibio[[espece[1]]]<-subset(ENFA_var,str_subset(names(var_expli[[1]]),"bio"))
#
# var_expli[[espece[2]]]<-dropLayer(ENFA_var,c("bio2","bio3","bio5","bio6","bio7","bio12","bio16"))
# var_explibio[[espece[2]]]<-subset(ENFA_var,str_subset(names(var_expli[[2]]),"bio"))
glc <- GLcenfa(x = ENFA_var)
glc <- GLcenfa(x = ENFA_var)
# correlation matrix
Z <- CENFA::parScale(ENFA_var)
mat <- CENFA::parCov(Z)
# ggcorrplot::ggcorrplot(mat,ggtheme = ggplot2::theme_gray,
#            hc.order = TRUE,
#            type = "lower",
#            lab = FALSE,
#            colors = c("#6D9EC1", "white", "#E46726"))
Base_Cordyla_Z<-Base$`Cordyla pinnata`
View(Base_Cordyla_Z)
pa_dataF <- st_as_sf(Base_Cordyla_Z, coords = c("xcoord","ycoord"), crs = crs(ENFA_var))
Cor <- raster::extract(ENFA_var, pa_dataF, df = TRUE)
View(Cor)
Cor<-Cor[,-1]
p.mat <- ggcorrplot::cor_pmat(Cor)
ggcorrplot::ggcorrplot(mat,ggtheme = ggplot2::theme_gray,
hc.order = TRUE,
type = "lower",
p.mat = p.mat,
colors = c("#6D9EC1", "white", "#E46726"))
mat <- CENFA::parCov(Z)
View(mat)
pa_dataF <- st_as_sf(Base_Cordyla_Z, coords = c("xcoord","ycoord"), crs = crs(ENFA_var))
Cor <- raster::extract(ENFA_var, pa_dataF, df = TRUE)
View(Cor)
mod.enfa<-list()
scatter.enfa<-list()
BaseENFA[[1]]@data[[1]]<-as.numeric(BaseENFA[[1]]@data[[1]])
mod.enfa[[espece[1]]] <- CENFA::enfa(x = ENFA_var, s.dat = BaseENFA[[1]], field = espece[1])
scatter.enfa[[espece[1]]] <-CENFA::scatter(x = mod.enfa[[1]], y = glc,n=35,p=1)
BaseENFA[[2]]@data[[1]]<-as.numeric(BaseENFA[[2]]@data[[1]])
mod.enfa[[espece[2]]] <- CENFA::enfa(x = ENFA_var, s.dat = BaseENFA[[2]], field = espece[2])
scatter.enfa[[espece[2]]] <-CENFA::scatter(x = mod.enfa[[2]], y = glc,n=35,p=1)
sac<-spatialAutoRange(rasterLayer = ENFA_var, # raster file
doParallel = T,
showPlots = FALSE)
sac$plots$barchart
sac$plots$mapplot
pa_data<-list()
spatialBlock<-list()
set.seed(1994)
for(k in 1:length(espece)){
pa_data[[espece[k]]]<-st_as_sf(Base[[k]], coords = coord, crs = crs(ENFA_var))
spatialBlock[[espece[k]]]<-spatialBlock(speciesData = pa_data[[espece[k]]],
species = espece[k],
rasterLayer = ENFA_var,
theRange = 6481, # size of the blocks
k = 5,
showBlocks = TRUE,
selection = "random",
iteration = 100, # find evenly dispersed folds
biomod2Format = FALSE,
rows = 6,
cols = 6,
xOffset = 0, # shift the blocks horizontally
yOffset = 0)
}
spatialBlock[[1]]$plots
Explorer(spatialBlock[[1]], ENFA_var, pa_data$`Faidherbia albida`,1)
summarise_fold(spatialBlock[[1]])
eF_bio <- list()
eF_Var<-list()
me_bio<-list()
me_Var<-list()
Base_Cordyla_Z<-Base$`Cordyla pinnata`
names(Base_Cordyla_Z)<-c("lon","lat","Cordyla")
folds <- spatialBlock[[1]]$folds
for (i in 1:5) {trainSet <- unlist(folds[[i]][1]) # training set indices
testSet <- unlist(folds[[i]][2]) # testing set indices
train<-Base_Cordyla_Z[trainSet, ]
p<-train %>%
filter(Cordyla==1)
p<-p[,c("lon","lat")]
a<-train %>%
filter(Cordyla==0)
a<-a[,c("lon","lat")]
test<-Base_Cordyla_Z[testSet, ]
occtest<-test %>%
filter(Cordyla==1)
occtest<-occtest[,c("lon","lat")]
bgtest<-test %>%
filter(Cordyla==0)
bgtest<-bgtest[,c("lon","lat")]
me_bio[[i]] <- dismo::maxent(var_explibio$`Cordyla pinnata`, p, a) #, factors='Sol'
me_Var[[i]] <- dismo::maxent(var_expli$`Cordyla pinnata`, p, a) #, factors='Sol'
eF_bio[[i]] <- dismo::evaluate(occtest, bgtest, me_bio[[i]], var_explibio$`Cordyla pinnata`)
eF_Var[[i]] <- dismo::evaluate(occtest, bgtest,  me_Var[[i]], var_expli$`Cordyla pinnata`)
}
var_expli<-list()
var_explibio<-list()
var_expli[[espece[1]]]<-dropLayer(ENFA_var,c("bio2","bio3","bio5","bio9","bio19","bio7"))
var_explibio[[espece[1]]]<-subset(ENFA_var,str_subset(names(var_expli[[1]]),"bio"))
var_expli[[espece[2]]]<-dropLayer(ENFA_var,c("bio2","bio6","bio16","bio3","bio5","bio7","bio1","bio10","CLYPPT","bio4"))
var_explibio[[espece[2]]]<-subset(ENFA_var,str_subset(names(var_expli[[2]]),"bio"))
eF_Var<-list()
me_bio<-list()
me_Var<-list()
Base_Cordyla_Z<-Base$`Cordyla pinnata`
names(Base_Cordyla_Z)<-c("lon","lat","Cordyla")
folds <- spatialBlock[[1]]$folds
for (i in 1:5) {trainSet <- unlist(folds[[i]][1]) # training set indices
testSet <- unlist(folds[[i]][2]) # testing set indices
train<-Base_Cordyla_Z[trainSet, ]
p<-train %>%
filter(Cordyla==1)
p<-p[,c("lon","lat")]
a<-train %>%
filter(Cordyla==0)
a<-a[,c("lon","lat")]
test<-Base_Cordyla_Z[testSet, ]
occtest<-test %>%
filter(Cordyla==1)
occtest<-occtest[,c("lon","lat")]
bgtest<-test %>%
filter(Cordyla==0)
bgtest<-bgtest[,c("lon","lat")]
me_bio[[i]] <- dismo::maxent(var_explibio$`Cordyla pinnata`, p, a) #, factors='Sol'
me_Var[[i]] <- dismo::maxent(var_expli$`Cordyla pinnata`, p, a) #, factors='Sol'
eF_bio[[i]] <- dismo::evaluate(occtest, bgtest, me_bio[[i]], var_explibio$`Cordyla pinnata`)
eF_Var[[i]] <- dismo::evaluate(occtest, bgtest,  me_Var[[i]], var_expli$`Cordyla pinnata`)
}
tmpdir<-"C:\\Users\\Hp\\OneDrive\\cirad\\ParcCordyla\\Data\\Sorties\\MaxEnt\\"
MaxentpredCordylabio<-list()
MaxentpredCordylavar<-list()
auc <- sapply(eF_bio, function(x){x@auc})
MaxentpredCordylabio[[espece[1]]]<-predict(var_explibio$`Cordyla pinnata`, me_bio[[which.max(auc)]])
writeRaster(MaxentpredCordylabio[[espece[1]]], filename=file.path(tmpdir, "Cordylabio.tif"), format="GTiff", overwrite=TRUE)
MaxentpredCordylabio[["AUC"]]<-auc[which.max(auc)]
MaxentpredCordylabio[["threshold"]]<- threshold(eF_bio[[which.max(auc)]], 'spec_sens')
MaxentpredCordylabio[["threshold"]]
#0.5146805
MaxentpredCordylabio[["PresenceAbsence"]]<-MaxentpredCordylabio[[espece[1]]]>MaxentpredCordylabio[["threshold"]]
writeRaster(MaxentpredCordylabio[["PresenceAbsence"]], filename=file.path(tmpdir, "CordylabioPA.tif"), format="GTiff", overwrite=TRUE)
auc <- sapply(eF_Var, function(x){x@auc})
MaxentpredCordylavar[[espece[1]]]<-predict(var_expli$`Cordyla pinnata`, me_Var[[which.max(auc)]])
writeRaster(MaxentpredCordylavar[[espece[1]]], filename=file.path(tmpdir, "Cordylavar.tif"), format="GTiff", overwrite=TRUE)
MaxentpredCordylavar[["AUC"]]<-auc[which.max(auc)]
MaxentpredCordylavar[["threshold"]]<- threshold(eF_Var[[which.max(auc)]], 'spec_sens')
MaxentpredCordylavar[["threshold"]]
#0.6292833
MaxentpredCordylavar[["PresenceAbsence"]]<-MaxentpredCordylavar[[espece[1]]]>MaxentpredCordylavar[["threshold"]]
writeRaster(MaxentpredCordylavar[["PresenceAbsence"]], filename=file.path(tmpdir, "CordylavarPA.tif"), format="GTiff", overwrite=TRUE)
#plot(MaxentpredCordylavar[[espece[1]]]>MaxentpredCordylavar[["threshold"]])
ggR_Predict2(MaxentpredCordylabio[[espece[1]]],MaxentpredCordylavar[[espece[1]]])
spatialBlock[[2]]$plots
summarise_fold(spatialBlock[[2]])
eB_bio <- list()
eB_Var<-list()
meB_bio<-list()
meB_Var<-list()
Base_Azadirachta_Z<-Base$`Azadirachta indica`
names(Base_Azadirachta_Z)<-c("lon","lat","Azadirachta")
folds<-spatialBlock[[2]]$folds
for (i in 1:5) {
trainSet <- unlist(folds[[i]][1]) # training set indices
testSet <- unlist(folds[[i]][2]) # testing set indices
train<-Base_Azadirachta_Z[trainSet, ]
p<-train %>%
filter(Azadirachta==1)
p<-p[,c("lon","lat")]
a<-train %>%
filter(Azadirachta==0)
a<-a[,c("lon","lat")]
test<-Base_Azadirachta_Z[testSet, ]
occtest<-test %>%
filter(Azadirachta==1)
occtest<-occtest[,c("lon","lat")]
bgtest<-test %>%
filter(Azadirachta==0)
bgtest<-bgtest[,c("lon","lat")]
meB_bio[[i]] <- maxent(var_explibio$`Azadirachta indica`, p, a) #, factors='Sol'
meB_Var[[i]] <- maxent(var_expli$`Azadirachta indica`, p, a) #, factors='Sol'
eB_bio[[i]] <- evaluate(occtest, bgtest, meB_bio[[i]], var_explibio$`Azadirachta indica`)
eB_Var[[i]] <- evaluate(occtest, bgtest,  meB_Var[[i]], var_expli$`Azadirachta indica`)
}
MaxentpredAzadirachtabio<-list()
MaxentpredAzadirachtavar<-list()
auc <- sapply(eB_bio, function(x){x@auc})
MaxentpredAzadirachtabio[[espece[2]]]<-predict(var_explibio$`Azadirachta indica`, meB_bio[[which.max(auc)]])
MaxentpredAzadirachtabio[["AUC"]]<-auc[which.max(auc)]
MaxentpredAzadirachtabio[["threshold"]]<- threshold(eB_bio[[which.max(auc)]], 'spec_sens')
#0.606967
MaxentpredAzadirachtabio[["PresenceAbsence"]]<-MaxentpredAzadirachtabio[[espece[2]]]>MaxentpredAzadirachtabio[["threshold"]]
auc <- sapply(eB_Var, function(x){x@auc})
MaxentpredAzadirachtavar[[espece[2]]]<-predict(var_expli$`Azadirachta indica`, meB_Var[[which.max(auc)]])
MaxentpredAzadirachtavar[["AUC"]]<-auc[which.max(auc)]
MaxentpredAzadirachtavar[["threshold"]]<- threshold(eB_Var[[which.max(auc)]], 'spec_sens')
#0.5391948
MaxentpredAzadirachtavar[["PresenceAbsence"]]<-MaxentpredAzadirachtavar[[espece[2]]]>MaxentpredAzadirachtavar[["threshold"]]
writeRaster(MaxentpredAzadirachtabio[[espece[2]]], filename=file.path(tmpdir, "Azadirachtabio.tif"), format="GTiff", overwrite=TRUE)
writeRaster(MaxentpredAzadirachtabio[["PresenceAbsence"]], filename=file.path(tmpdir, "AzadirachtabioPA.tif"), format="GTiff", overwrite=TRUE)
writeRaster(MaxentpredAzadirachtavar[[espece[2]]], filename=file.path(tmpdir, "Azadirachtavar.tif"), format="GTiff", overwrite=TRUE)
writeRaster(MaxentpredAzadirachtavar[["PresenceAbsence"]], filename=file.path(tmpdir, "AzadirachtavarPA.tif"), format="GTiff", overwrite=TRUE)
#plot(MaxentpredFaidherbiavar[[espece[1]]])
ggR_Predict2(MaxentpredAzadirachtabio[[espece[2]]],MaxentpredAzadirachtavar[[espece[2]]])
MaxentpredAzadirachtabio[["threshold"]]
MaxentpredAzadirachtavar[["threshold"]]
#plot(MaxentpredFaidherbiavar[[espece[1]]])
ggR_Predict2(MaxentpredAzadirachtabio[[espece[2]]],MaxentpredAzadirachtavar[[espece[2]]])
Evaluation<-data.frame(Echantillon=1:5,AUC=0,Espece="Cordyla pinnata",Model="Non")
auc <- sapply(eF_bio, function(x){x@auc})
Evaluation$AUC<-auc
auc <- sapply(eF_Var, function(x){x@auc})
Evaluation<-rbind(Evaluation,data.frame(Echantillon=1:5,AUC=auc,Espece="Cordyla pinnata",Model="Oui"))
auc <- sapply(eB_bio, function(x){x@auc})
Evaluation<-rbind(Evaluation,data.frame(Echantillon=1:5,AUC=auc,Espece="Azadirachta indica",Model="Non"))
auc <- sapply(eB_Var, function(x){x@auc})
Evaluation<-rbind(Evaluation,data.frame(Echantillon=1:5,AUC=auc,Espece="Azadirachta indica",Model="Oui"))
Evaluation$Type<-"MaxEnt"
Evaluation$Blocs<-"Oui"
Evaluation<-as.data.frame(Evaluation)
View(Evaluation)
write.csv2(Evaluation,"EvaluationMaxEnt")
names(var_expli)
names(var_expli[[1]])
varexplicat<-data.frame(names(var_expli[[1]]))
View(varexplicat)
varexplicat<-data.frame(espece[1]=names(var_expli[[1]]))
espece[1]
varexplicat<-data.frame(names(var_expli[[1]]),names(var_expli[[2]]))
varex<-data.frame(names(var_expli[[2]]))
varia<-cbind(varexplicat,varex)
version
